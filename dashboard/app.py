# App Streamlit: Monitoramento do Processador
# Constru√ß√£o do Dashboard com filtros (ano/m√™s/dia), s√©ries temporais e rela√ß√µes

import streamlit as st
from src.charts.charts import grafico_linhas, grafico_colunas
from src.queries.queries import time_vs_temp, temp_vs_speed, time_vs_power, temp_vs_power, faixas_temp, anos_disponiveis, meses_disponiveis, dias_disponiveis, resumo_temp

# Configura√ß√£o da p√°gina (t√≠tulo e layout)
st.set_page_config(page_title="Meu Processador", layout="wide")

# T√≠tulo da aplica√ß√£o (HTML simples)
st.markdown("<h1 style='text-align: center; color: black;'>Meu Processador</h1>", unsafe_allow_html=True)

# Barra lateral: filtros de data e granularidade
with st.sidebar:
    st.header("Filtros de Data")

    # Op√ß√µes de ano dispon√≠veis para filtragem
    years = anos_disponiveis()
    # Seletor de ano (habilita filtros de m√™s e dia)
    sel_year = st.selectbox(
        "Ano",
        options=["Todos"] + years,
        index=0,
        help="Selecione um ano para habilitar o filtro de m√™s e dia."
    )

    # Converte "Todos" -> None
    # Normaliza "Todos" -> None para consultas
    year_val = None if sel_year == "Todos" else int(sel_year)

    # Op√ß√µes de m√™s condicionadas ao ano
    months = meses_disponiveis(year=year_val)
    # Seletor de m√™s
    sel_month = st.selectbox(
        "M√™s",
        options=["Todos"] + months if months else ["Todos"],
        index=0,
        help="Selecione um m√™s (opcional)."
    )
    # Normaliza m√™s selecionado
    month_val = None if sel_month == "Todos" else int(sel_month)

    # Op√ß√µes de dia condicionadas a ano/m√™s
    days = dias_disponiveis(year=year_val, month=month_val)
    # Seletor de dia
    sel_day = st.selectbox(
        "Dia",
        options=["Todos"] + days if days else ["Todos"],
        index=0,
        help="Selecione um dia (opcional, depende do m√™s)."
    )
    # Normaliza dia selecionado
    day_val = None if sel_day == "Todos" else int(sel_day)


# Carregando dataframes
df_faixas_temp = faixas_temp(year=year_val, month=month_val, day=day_val)
df_temp_vs_speed = temp_vs_speed(year=year_val, month=month_val, day=day_val)
df_time_vs_temp = time_vs_temp(year=year_val, month=month_val, day=day_val)
df_time_vs_power = time_vs_power(year=year_val, month=month_val, day=day_val)
df_temp_vs_power = temp_vs_power(year=year_val, month=month_val, day=day_val)
df_resumo_temp = resumo_temp(year=year_val, month=month_val, day=day_val)

# Layout principal: abas (Resumo, S√©ries por Hora, Rela√ß√µes)
aba_resumo, aba_series, aba_relacoes = st.tabs(["Resumo", "S√©ries por Hora", "Rela√ß√µes"])

# Aba "Resumo": vis√£o geral e distribui√ß√£o de faixas de temperatura
with aba_resumo:

    # Duas colunas: KPIs (esquerda) e gr√°fico (direita)
    col1, col2 = st.columns([1, 2])  # esquerda menor, direita maior

    # Coluna 1: cart√µes de m√©tricas
    with col1: 
        st.subheader("Vis√£o geral de temperaturas")
        # Estat√≠sticas b√°sicas de temperatura
        max_val = df_resumo_temp["core temp"].max()
        min_val = df_resumo_temp["core temp"].min()
        media_val = df_resumo_temp["core temp"].mean()
        mediana_val = df_resumo_temp["core temp"].median()

        st.metric(label="üå°Ô∏è M√°xima", value=f"{max_val:.2f} ¬∫C") # Aqui descobri que dava pra usar emoticon dentro de c√≥digo, LOL
        st.metric(label="‚ùÑÔ∏è M√≠nima", value=f"{min_val:.2f} ¬∫C")
        st.metric(label="üìä M√©dia", value=f"{media_val:.2f} ¬∫C")
        st.metric(label="‚öñÔ∏è Mediana", value=f"{mediana_val:.2f} ¬∫C")

    # Coluna 2: gr√°fico de linhas com n√≠vel de detalhe (Dia/M√™s/Ano)
    with col2:
        st.subheader("Evolu√ß√£o da Temperatura ao Longo do Tempo")
        st.markdown("""<style>div[data-baseweb="select"] {max-width: 150px;}</style>""", unsafe_allow_html=True)

        # Controle de granularidade do gr√°fico
        nivel = st.selectbox("N√≠vel de detalhe", ["Dia", "M√™s", "Ano"])

        # Agrega m√°ximo por dia e tipo
        if nivel == "Dia":
            df_plot = df_resumo_temp.groupby(["dia", "type"], as_index=False)["core temp"].max()
            x_col = "dia"
        # Agrega m√°ximo por m√™s e tipo
        elif nivel == "M√™s":
            df_plot = df_resumo_temp.groupby(["mes", "type"], as_index=False)["core temp"].max()
            x_col = "mes"
        # Caso padr√£o: agrega m√°ximo por ano e tipo
        else: 
            df_plot = df_resumo_temp.groupby(["ano", "type"], as_index=False)["core temp"].max()
            x_col = "ano"

        # Monta objeto de gr√°fico e renderiza com Altair
        grafico = grafico_linhas(
            df_plot,
            coluna_x=x_col,
            coluna_y="core temp",
            coluna_categoria="type",
            titulo="Temperatura do N√∫cleo(¬∫C) ao Longo do Tempo"
        )
        st.altair_chart(grafico, use_container_width=True)

# Separador visual
    st.markdown("---")
    # Barras: m√©dia di√°ria de minutos por faixa de temperatura
    grafico_col = grafico_colunas(
        df_faixas_temp,
        coluna_x="categoria",
        coluna_y="media diaria",
        titulo="M√©dia Di√°ria de Minutos por Faixa de Temperatura(¬∫C)",
        mostrar_rotulos=True,
        posicao_rotulo="fora",
        cor_rotulo="black"
    )
    st.altair_chart(grafico_col, use_container_width=True)

    st.caption("Quanto tempo, em m√©dia por dia, o processador ficou em cada faixa de temperatura.")

# Aba "S√©ries por Hora": padr√µes ao longo do dia
with aba_series:
    st.subheader("Padr√µes ao longo do dia")
    # Duas colunas: Gr√°ficos de linhas
    col1, col2 = st.columns(2, gap="medium")

    # S√©rie temporal: temperatura ao longo do dia
    with col1:
        # Monta objeto de gr√°fico e renderiza com Altair
        grafico = grafico_linhas(
            df_time_vs_temp,
            coluna_x="time of day",
            coluna_y="core temp",
            coluna_categoria="type",
            titulo="Temperatura do N√∫cleo(¬∫C) ao Longo do Dia"
        )
        st.altair_chart(grafico, use_container_width=True)

    # Coluna 2: gr√°fico de linhas com n√≠vel de detalhe (Dia/M√™s/Ano)
    # S√©rie temporal: energia do CPU ao longo do dia
    with col2:
        # Monta objeto de gr√°fico e renderiza com Altair
        grafico = grafico_linhas(
            df_time_vs_power,
            coluna_x="time of day",
            coluna_y="cpu power",
            coluna_categoria="type",
            titulo="Energia do CPU ao Longo do Dia"
        )
        st.altair_chart(grafico, use_container_width=True)

    st.caption("Padr√µes da temperatura e consumo de energia durante o dia.")


# Aba "Rela√ß√µes": correla√ß√£o visual entre vari√°veis
with aba_relacoes:
    st.subheader("Rela√ß√µes entre vari√°veis")
    # Duas colunas: Gr√°ficos de linhas
    col1, col2 = st.columns(2, gap="medium")

    # Rela√ß√£o temperatura vs velocidade do n√∫cleo
    with col1:
        # Monta objeto de gr√°fico e renderiza com Altair
        grafico = grafico_linhas(
            df_temp_vs_speed,
            coluna_x="core temp",
            coluna_y="core speed",
            coluna_categoria="type",
            titulo="Temperatura do N√∫cleo(¬∫C) vs Velocidade do N√∫cleo"
        )
        st.altair_chart(grafico, use_container_width=True)

    # Rela√ß√£o temperatura vs energia do CPU
    with col2:
        # Monta objeto de gr√°fico e renderiza com Altair
        grafico = grafico_linhas(
            df_temp_vs_power,
            coluna_x="core temp",
            coluna_y="cpu power",
            coluna_categoria="type",
            titulo="Temperatura do N√∫cleo(¬∫C) vs Energia do CPU"
        )
        st.altair_chart(grafico, use_container_width=True)

    st.caption("Varia√ß√µes da velocidade e energia do CPU em rela√ß√£o √† temperatura.")